/*!
 * js-data-structures
 * http://github.com/Tyriar/js-data-structures
 *
 * Copyright 2015 Daniel Imms
 * Released under the MIT license
 * http://github.com/Tyriar/js-data-structures/blob/master/LICENSE
 */
!function(a,b){"use strict";"function"==typeof define&&define.amd?define([],function(){return a.BinaryHeap=b()}):"object"==typeof exports?module.exports=b():a.BinaryHeap=b()}(this,function(){"use strict";function a(b,d){var g=e(d),h=f(d),i=d;g<b.list.length&&b.compare(b.list[g],b.list[d])<0&&(i=g),h<b.list.length&&b.compare(b.list[h],b.list[i])<0&&(i=h),i!==d&&(c(b.list,d,i),a(b,i))}function b(b,c){b.list=c;for(var d=Math.floor(b.list.length/2);d>=0;d--)a(b,d)}function c(a,b,c){var d=a[b];a[b]=a[c],a[c]=d,a[b].i=b,a[c].i=c}function d(a){return Math.floor(a/2)}function e(a){return 2*a}function f(a){return 2*a+1}function g(a,b,c){this.key=a,this.value=b,this.i=c}var h=function(a){this.list=[],a&&(this.compare=a)};return h.prototype.buildHeap=function(a,c){if(a.length!==c.length)throw"Key array must be the same length as value array";for(var d=[],e=0;e<a.length;e++)d.push(new g(a[e],c[e],e));b(this,d)},h.prototype.clear=function(){this.list.length=0},h.prototype.decreaseKey=function(a,b){if("undefined"==typeof a)throw"Cannot decrease key of non-existent node";if(this.compare({key:b},{key:a.key})>0)throw"New key is larger than old key";a.key=b;for(var e=d(a.i);this.compare(a,this.list[e])<0;)c(this.list,a.i,e),e=d(a.i)},h.prototype["delete"]=function(a){for(;a.i>0;){var b=d(a.i);c(this.list,a.i,b)}this.extractMinimum()},h.prototype.extractMinimum=function(){if(!this.list.length)return void 0;if(1===this.list.length)return this.list.shift();var b=this.list[0];return this.list[0]=this.list.pop(),this.list[0].i=0,a(this,0),b},h.prototype.findMinimum=function(){return this.isEmpty()?void 0:this.list[0]},h.prototype.insert=function(a,b){var e=this.list.length,f=new g(a,b,e);this.list.push(f);for(var h=d(e);h!==e&&this.compare(this.list[e],this.list[h])<0;)c(this.list,e,h),e=h,h=d(e);return f},h.prototype.isEmpty=function(){return!this.list.length},h.prototype.size=function(){return this.list.length},h.prototype.union=function(a){var c=this.list.concat(a.list);b(this,c)},h.prototype.compare=function(a,b){return a.key>b.key?1:a.key<b.key?-1:0},h});